#!/usr/bin/env python

from ansible.playbook import PlayBook
from ansible.inventory import Inventory
from ansible import callbacks
from ansible import utils

import jinja2
from tempfile import NamedTemporaryFile
import os
import json

# Boilerplace callbacks for stdout/stderr and log output
utils.VERBOSITY = 0
playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)
stats = callbacks.AggregateStats()
runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)

# Template for temporary inventory file.
# Includes a hack to interpolate the sudo password
# from the client. This script will always prompt
# for the sudo password because trying to figure out
# whether the VPN client has ansible_sudo_pass declared
# elsewhere seems impossible. If you have it declared elsewher,
# don't use this script, simply include the top-level playbook.
inventory = """
[digitalocean_vpn_client]
localhost ansible_connection=local
"""


inventory_template = jinja2.Template(inventory)
rendered_inventory = inventory_template.render({
    # placeholder dict for host_vars (currently unused)
})

# Create a temporary file and write the template string to it
hosts = NamedTemporaryFile(delete=False)
hosts.write(rendered_inventory)
hosts.close()

# Configure playbook invocation.
pb = PlayBook(
    playbook='digitalocean-vpn.yml',
    host_list=hosts.name,
    callbacks=playbook_cb,
    runner_callbacks=runner_cb,
    stats=stats,
)

# Run playbook to configure VPN.
results = pb.run()

# Ensure on_stats callback is called
# for callback modules
#playbook_cb.on_stats(pb.stats)

# Clean up temporary inventory file.
os.remove(hosts.name)

print(json.dumps(results))
